// define the newgrf
grf {
	grfid: "CA\12\1E";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESCRIPTION);
	version: 3;
	min_compatible_version: 195;
	param 0 {
        param_adjust_vehicle_capacity {
            type:    int;
            name:    string(STR_PARAM_ADJUST_VEHICLE_CAPACITY);
            min_value: 0;
            max_value: 2;
            def_value: 1;
            names: {
                0: string(STR_PARAM_ADJUST_VEHICLE_CAPACITY_OPTION_0);
                1: string(STR_PARAM_ADJUST_VEHICLE_CAPACITY_OPTION_1);
                2: string(STR_PARAM_ADJUST_VEHICLE_CAPACITY_OPTION_2);
            };
        }
    }
}

basecost {
 	PR_BUILD_VEHICLE_TRAIN: -1;
}

// sort order
sort(FEAT_TRAINS, [1570, 1260, 1263]);

/*
 * ********************************************
 * Define cargo translation table and refits
 * ********************************************
 */

cargotable {
    
    PASS,
    
    
    TOUR,
    
    
    MAIL,
    
    
    COAL,
    
    
    IORE,
    
    
    GRVL,
    
    
    SAND,
    
    
    AORE,
    
    
    CORE,
    
    
    CLAY,
    
    
    SCMT,
    
    
    WOOD,
    
    
    LIME,
    
    
    GOOD,
    
    
    FOOD,
    
    
    STEL,
    
    
    FMSP,
    
    
    ENSP,
    
    
    BEER,
    
    
    BDMT,
    
    
    MNSP,
    
    
    PAPR,
    
    
    WDPR,
    
    
    VEHI,
    
    
    COPR,
    
    
    DYES,
    
    
    OIL_,
    
    
    RFPR,
    
    
    PETR,
    
    
    PLAS,
    
    
    WATR,
    
    
    FISH,
    
    
    CERE,
    
    
    FICR,
    
    
    FRVG,
    
    
    FRUT,
    
    
    GRAI,
    
    
    LVST,
    
    
    MAIZ,
    
    
    MILK,
    
    
    RUBR,
    
    
    SGBT,
    
    
    SGCN,
    
    
    WHEA,
    
    
    WOOL,
    
    
    OLSD,
    
    
    SUGR,
    
}
/*
 * *********************
 * Define railtype table
 * *********************
 */

 railtypetable {
 	RAIL,
 	ELRL,
 	MGLV,
 	METRO: [MTRO, "3RDR", ELRL],
 	NG: [NAAN, NGRL, NLOW, NAAE, NBAN, ENLW, ENHI, ELNG],
 	ELNG: [NAAE, NBAN, ENLW, ENHI, ELNG]
 }
disable_item(FEAT_TRAINS, 00, 115);
// add the trailing slices to articulated consist
switch (FEAT_TRAINS, SELF, walker_articulated_cb_switch, extra_callback_info1) {
    
        0: return walker;
    
    
        1: return walker_1;
    
    
        2: return walker_2;
    
  return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
// -- begin walker -- 




// graphics


    
    
    
        template spriteset_template_walker(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -14]
            [76,        y,          22,        22,          -12, -15]
            [107,       y,          32,        15,          -12, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -15]
        }
    




    spriteset(walker_ss_0, "generated/graphics/walker_0.png") {
      spriteset_template_walker(10 + 0)
    }

    spritegroup walker_sg_0 {
        loaded:  [
            walker_ss_0,
        ];
        loading: [
            walker_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, walker_switch_graphics_0, 0) {
        0: return walker_sg_0;
        return walker_sg_0;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(walker_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup walker_sg_hidden {
    loaded:  [
        walker_ss_hidden,
    ];
    loading: [
        walker_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, walker_switch_graphics_random_0) {
        
            1: return walker_switch_graphics_0;
        
    }



switch (FEAT_TRAINS, SELF, walker_switch_graphics_by_year, build_year) {
    
        0..5000000:walker_switch_graphics_random_0;
    
    return walker_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, walker_switch_graphics, extra_callback_info1) {
    0x10: return walker_switch_graphics_by_year;
    return walker_sg_hidden;
}


// buy menu graphics
template spriteset_template_purchase_walker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 28, 15, -14, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(walker_ss_purchase, "generated/graphics/walker_0.png") {
  spriteset_template_purchase_walker()
}

spritegroup walker_sg_purchase {
    loaded:  [
        walker_ss_purchase,
    ];
    loading: [
        walker_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, walker_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, walker_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, walker_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


switch (FEAT_TRAINS, SELF, walker_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: walker_switch_cargo_capacity_by_cargo_0;
    1: walker_switch_cargo_capacity_by_cargo_1;
    2: walker_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, walker, 1570) {
    property {
        name:                           string(STR_NAME_walker, string(STR_NAME_SUFFIX_DIESEL));
        climates_available:             ALL_CLIMATES;
        engine_class:                   ENGINE_CLASS_DIESEL;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DISABLE, 0);
        introduction_date:              date(1959,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          950hp;
        
            speed:                          55mph;
        
        weight:                         50ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    69;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  5;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         2;
        track_type:                     NG;
    }
    graphics {
        cargo_capacity:                 walker_switch_cargo_capacity;
        purchase_cargo_capacity:        walker_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY), string(STR_EMPTY));
        default:                        walker_switch_graphics;
        purchase:                       walker_sg_purchase;
        
        
            articulated_part: walker_articulated_cb_switch;
        
    }
}

// -- end 1570 -- 


// -- begin walker_1 -- 




// graphics


    
    
    
        template spriteset_template_walker_1(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -14]
            [76,        y,          22,        22,          -12, -15]
            [107,       y,          32,        15,          -12, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -15]
        }
    




    spriteset(walker_1_ss_0, "generated/graphics/walker_0.png") {
      spriteset_template_walker_1(10 + 0)
    }

    spritegroup walker_1_sg_0 {
        loaded:  [
            walker_1_ss_0,
        ];
        loading: [
            walker_1_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, walker_1_switch_graphics_0, 0) {
        0: return walker_1_sg_0;
        return walker_1_sg_0;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(walker_1_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup walker_1_sg_hidden {
    loaded:  [
        walker_1_ss_hidden,
    ];
    loading: [
        walker_1_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, walker_1_switch_graphics_random_0) {
        
            1: return walker_1_switch_graphics_0;
        
    }



switch (FEAT_TRAINS, SELF, walker_1_switch_graphics_by_year, build_year) {
    
        0..5000000:walker_1_switch_graphics_random_0;
    
    return walker_1_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, walker_1_switch_graphics, extra_callback_info1) {
    0x10: return walker_1_sg_hidden;
    return walker_1_switch_graphics_by_year;
}


// buy menu graphics
template spriteset_template_purchase_walker_1() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 28, 15, -14, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(walker_1_ss_purchase, "generated/graphics/walker_0.png") {
  spriteset_template_purchase_walker_1()
}

spritegroup walker_1_sg_purchase {
    loaded:  [
        walker_1_ss_purchase,
    ];
    loading: [
        walker_1_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, walker_1_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, walker_1_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, walker_1_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


switch (FEAT_TRAINS, SELF, walker_1_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: walker_1_switch_cargo_capacity_by_cargo_0;
    1: walker_1_switch_cargo_capacity_by_cargo_1;
    2: walker_1_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, walker_1, 1571) {
    property {
        name:                           string(STR_NAME_walker, string(STR_NAME_SUFFIX_DIESEL));
        climates_available:             NO_CLIMATE;
        engine_class:                   ENGINE_CLASS_DIESEL;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DIESEL, 0);
        introduction_date:              date(1959,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          950hp;
        
            speed:                          55mph;
        
        weight:                         50ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    69;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  5;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         3;
        track_type:                     NG;
    }
    graphics {
        cargo_capacity:                 walker_1_switch_cargo_capacity;
        purchase_cargo_capacity:        walker_1_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY), string(STR_EMPTY));
        default:                        walker_1_switch_graphics;
        purchase:                       walker_1_sg_purchase;
        
        
    }
}

// -- end 1571 -- 


/*Null trailing slice for units */

spriteset(walker_2_ss, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup walker_2_sg {
    loaded:  [
        walker_2_ss,
    ];
    loading: [
        walker_2_ss,
    ];
}

item(FEAT_TRAINS, walker_2, 1572) {
    property {
        climates_available:             NO_CLIMATE;
        introduction_date:              date(01,01,01);
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        weight:                         0ton;
        cost_factor:                    0;
        running_cost_factor:            0;
        refit_cost:                     0;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask();
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        misc_flags:                     bitmask(); // nml constants
        length:                         2;
    }
    graphics {
        default:                        walker_2_sg;
    }
}
// add the trailing slices to articulated consist
switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_articulated_cb_switch, extra_callback_info1) {
    
        0: return box_car_brit_gen_1;
    
    
        1: return box_car_brit_gen_1_1;
    
    
        2: return box_car_brit_gen_1_2;
    
  return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
// -- begin box_car_brit_gen_1 -- 




// graphics


    
    
    
        template spriteset_template_box_car_brit_gen_1(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -18]
            [76,        y,          22,        22,          -8, -17]
            [107,       y,          32,        15,          -4, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -18]
        }
    




    spriteset(box_car_brit_gen_1_ss_0, "generated/graphics/box_car_brit_gen_1_0.png") {
      spriteset_template_box_car_brit_gen_1(10 + 0)
    }

    spritegroup box_car_brit_gen_1_sg_0 {
        loaded:  [
            box_car_brit_gen_1_ss_0,
        ];
        loading: [
            box_car_brit_gen_1_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_graphics_0, 0) {
        0: return box_car_brit_gen_1_sg_0;
        return box_car_brit_gen_1_sg_0;
    }


    spriteset(box_car_brit_gen_1_ss_1, "generated/graphics/box_car_brit_gen_1_1.png") {
      spriteset_template_box_car_brit_gen_1(10 + 0)
    }

    spritegroup box_car_brit_gen_1_sg_1 {
        loaded:  [
            box_car_brit_gen_1_ss_1,
        ];
        loading: [
            box_car_brit_gen_1_ss_1,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_graphics_1, 0) {
        0: return box_car_brit_gen_1_sg_1;
        return box_car_brit_gen_1_sg_1;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(box_car_brit_gen_1_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_1_sg_hidden {
    loaded:  [
        box_car_brit_gen_1_ss_hidden,
    ];
    loading: [
        box_car_brit_gen_1_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_graphics_random_0) {
        
            1: return box_car_brit_gen_1_switch_graphics_0;
        
        
            1: return box_car_brit_gen_1_switch_graphics_1;
        
    }



switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_graphics_by_year, build_year) {
    
        0..5000000:box_car_brit_gen_1_switch_graphics_random_0;
    
    return box_car_brit_gen_1_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_graphics, extra_callback_info1) {
    0x10: return box_car_brit_gen_1_switch_graphics_by_year;
    return box_car_brit_gen_1_sg_hidden;
}


// buy menu graphics
template spriteset_template_purchase_box_car_brit_gen_1() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 20, 15, -10, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(box_car_brit_gen_1_ss_purchase, "generated/graphics/box_car_brit_gen_1_0.png") {
  spriteset_template_purchase_box_car_brit_gen_1()
}

spritegroup box_car_brit_gen_1_sg_purchase {
    loaded:  [
        box_car_brit_gen_1_ss_purchase,
    ];
    loading: [
        box_car_brit_gen_1_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: box_car_brit_gen_1_switch_cargo_capacity_by_cargo_0;
    1: box_car_brit_gen_1_switch_cargo_capacity_by_cargo_1;
    2: box_car_brit_gen_1_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, box_car_brit_gen_1, 1260) {
    property {
        name:                           string(STR_NAME_box_car_brit_gen_1, string(STR_NAME_SUFFIX_CAR));
        climates_available:             ALL_CLIMATES;
        engine_class:                   ENGINE_CLASS_STEAM;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DISABLE, 0);
        introduction_date:              date(1860,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        
            speed:                          65mph;
        
        weight:                         12ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    22;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         1;
        track_type:                     RAIL;
    }
    graphics {
        cargo_capacity:                 box_car_brit_gen_1_switch_cargo_capacity;
        purchase_cargo_capacity:        box_car_brit_gen_1_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_BUY_MENU_OFFERS_AUTOREFIT), string(STR_EMPTY));
        default:                        box_car_brit_gen_1_switch_graphics;
        purchase:                       box_car_brit_gen_1_sg_purchase;
        
        
            articulated_part: box_car_brit_gen_1_articulated_cb_switch;
        
    }
}

// -- end 1260 -- 


// -- begin box_car_brit_gen_1_1 -- 




// graphics


    
    
    
        template spriteset_template_box_car_brit_gen_1_1(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -18]
            [76,        y,          22,        22,          -8, -17]
            [107,       y,          32,        15,          -4, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -18]
        }
    




    spriteset(box_car_brit_gen_1_1_ss_0, "generated/graphics/box_car_brit_gen_1_0.png") {
      spriteset_template_box_car_brit_gen_1_1(10 + 0)
    }

    spritegroup box_car_brit_gen_1_1_sg_0 {
        loaded:  [
            box_car_brit_gen_1_1_ss_0,
        ];
        loading: [
            box_car_brit_gen_1_1_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_graphics_0, 0) {
        0: return box_car_brit_gen_1_1_sg_0;
        return box_car_brit_gen_1_1_sg_0;
    }


    spriteset(box_car_brit_gen_1_1_ss_1, "generated/graphics/box_car_brit_gen_1_1.png") {
      spriteset_template_box_car_brit_gen_1_1(10 + 0)
    }

    spritegroup box_car_brit_gen_1_1_sg_1 {
        loaded:  [
            box_car_brit_gen_1_1_ss_1,
        ];
        loading: [
            box_car_brit_gen_1_1_ss_1,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_graphics_1, 0) {
        0: return box_car_brit_gen_1_1_sg_1;
        return box_car_brit_gen_1_1_sg_1;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(box_car_brit_gen_1_1_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_1_1_sg_hidden {
    loaded:  [
        box_car_brit_gen_1_1_ss_hidden,
    ];
    loading: [
        box_car_brit_gen_1_1_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_graphics_random_0) {
        
            1: return box_car_brit_gen_1_1_switch_graphics_0;
        
        
            1: return box_car_brit_gen_1_1_switch_graphics_1;
        
    }



switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_graphics_by_year, build_year) {
    
        0..5000000:box_car_brit_gen_1_1_switch_graphics_random_0;
    
    return box_car_brit_gen_1_1_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_graphics, extra_callback_info1) {
    0x10: return box_car_brit_gen_1_1_sg_hidden;
    return box_car_brit_gen_1_1_switch_graphics_by_year;
}


// buy menu graphics
template spriteset_template_purchase_box_car_brit_gen_1_1() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 20, 15, -10, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(box_car_brit_gen_1_1_ss_purchase, "generated/graphics/box_car_brit_gen_1_0.png") {
  spriteset_template_purchase_box_car_brit_gen_1_1()
}

spritegroup box_car_brit_gen_1_1_sg_purchase {
    loaded:  [
        box_car_brit_gen_1_1_ss_purchase,
    ];
    loading: [
        box_car_brit_gen_1_1_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 14;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 20;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 27;
    }


switch (FEAT_TRAINS, SELF, box_car_brit_gen_1_1_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_0;
    1: box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_1;
    2: box_car_brit_gen_1_1_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, box_car_brit_gen_1_1, 1261) {
    property {
        name:                           string(STR_NAME_box_car_brit_gen_1, string(STR_NAME_SUFFIX_CAR));
        climates_available:             NO_CLIMATE;
        engine_class:                   ENGINE_CLASS_STEAM;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DISABLE, 0);
        introduction_date:              date(1860,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 14;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        
            speed:                          65mph;
        
        weight:                         12ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    22;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_PIECE_GOODS,CC_EXPRESS,CC_ARMOURED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [GRAI,WHEA,MAIZ];
        cargo_disallow_refit:           [];
        default_cargo_type:             GOOD;
        loading_speed:                  20;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         3;
        track_type:                     RAIL;
    }
    graphics {
        cargo_capacity:                 box_car_brit_gen_1_1_switch_cargo_capacity;
        purchase_cargo_capacity:        box_car_brit_gen_1_1_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_BUY_MENU_OFFERS_AUTOREFIT), string(STR_EMPTY));
        default:                        box_car_brit_gen_1_1_switch_graphics;
        purchase:                       box_car_brit_gen_1_1_sg_purchase;
        
        
    }
}

// -- end 1261 -- 


/*Null trailing slice for units */

spriteset(box_car_brit_gen_1_2_ss, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_1_2_sg {
    loaded:  [
        box_car_brit_gen_1_2_ss,
    ];
    loading: [
        box_car_brit_gen_1_2_ss,
    ];
}

item(FEAT_TRAINS, box_car_brit_gen_1_2, 1262) {
    property {
        climates_available:             NO_CLIMATE;
        introduction_date:              date(01,01,01);
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        weight:                         0ton;
        cost_factor:                    0;
        running_cost_factor:            0;
        refit_cost:                     0;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask();
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        misc_flags:                     bitmask(); // nml constants
        length:                         1;
    }
    graphics {
        default:                        box_car_brit_gen_1_2_sg;
    }
}
// add the trailing slices to articulated consist
switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_articulated_cb_switch, extra_callback_info1) {
    
        0: return box_car_brit_gen_2;
    
    
        1: return box_car_brit_gen_2_1;
    
    
        2: return box_car_brit_gen_2_2;
    
  return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
// -- begin box_car_brit_gen_2 -- 




// graphics


    
    
    
        template spriteset_template_box_car_brit_gen_2(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -16]
            [76,        y,          22,        22,          -10, -16]
            [107,       y,          32,        15,          -8, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -17]
        }
    




    spriteset(box_car_brit_gen_2_ss_0, "generated/graphics/box_car_brit_gen_2_0.png") {
      spriteset_template_box_car_brit_gen_2(10 + 0)
    }

    spritegroup box_car_brit_gen_2_sg_0 {
        loaded:  [
            box_car_brit_gen_2_ss_0,
        ];
        loading: [
            box_car_brit_gen_2_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_graphics_0, 0) {
        0: return box_car_brit_gen_2_sg_0;
        return box_car_brit_gen_2_sg_0;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(box_car_brit_gen_2_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_2_sg_hidden {
    loaded:  [
        box_car_brit_gen_2_ss_hidden,
    ];
    loading: [
        box_car_brit_gen_2_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_graphics_random_0) {
        
            1: return box_car_brit_gen_2_switch_graphics_0;
        
    }



switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_graphics_by_year, build_year) {
    
        0..5000000:box_car_brit_gen_2_switch_graphics_random_0;
    
    return box_car_brit_gen_2_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_graphics, extra_callback_info1) {
    0x10: return box_car_brit_gen_2_switch_graphics_by_year;
    return box_car_brit_gen_2_sg_hidden;
}


// buy menu graphics
template spriteset_template_purchase_box_car_brit_gen_2() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 24, 15, -12, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(box_car_brit_gen_2_ss_purchase, "generated/graphics/box_car_brit_gen_2_0.png") {
  spriteset_template_purchase_box_car_brit_gen_2()
}

spritegroup box_car_brit_gen_2_sg_purchase {
    loaded:  [
        box_car_brit_gen_2_ss_purchase,
    ];
    loading: [
        box_car_brit_gen_2_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 0;
    }


switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: box_car_brit_gen_2_switch_cargo_capacity_by_cargo_0;
    1: box_car_brit_gen_2_switch_cargo_capacity_by_cargo_1;
    2: box_car_brit_gen_2_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, box_car_brit_gen_2, 1263) {
    property {
        name:                           string(STR_NAME_box_car_brit_gen_2, string(STR_NAME_SUFFIX_CAR));
        climates_available:             ALL_CLIMATES;
        engine_class:                   ENGINE_CLASS_STEAM;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DISABLE, 0);
        introduction_date:              date(1940,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        
            speed:                          100mph;
        
        weight:                         18ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    22;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         1;
        track_type:                     RAIL;
    }
    graphics {
        cargo_capacity:                 box_car_brit_gen_2_switch_cargo_capacity;
        purchase_cargo_capacity:        box_car_brit_gen_2_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_BUY_MENU_OFFERS_AUTOREFIT), string(STR_EMPTY));
        default:                        box_car_brit_gen_2_switch_graphics;
        purchase:                       box_car_brit_gen_2_sg_purchase;
        
        
            articulated_part: box_car_brit_gen_2_articulated_cb_switch;
        
    }
}

// -- end 1263 -- 


// -- begin box_car_brit_gen_2_1 -- 




// graphics


    
    
    
        template spriteset_template_box_car_brit_gen_2_1(y) {
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            [60,        y,          8,         25,          -3, -16]
            [76,        y,          22,        22,          -10, -16]
            [107,       y,          32,        15,          -8, -11]
            [156,       y,          22,        22,          -8, -15]
            [188,       y,          8,         25,          -3, -12]
            [204,       y,          22,        22,          -14, -14]
            [235,       y,          32,        15,          -17, -11]
            [284,       y,          22,        22,          -8, -17]
        }
    




    spriteset(box_car_brit_gen_2_1_ss_0, "generated/graphics/box_car_brit_gen_2_0.png") {
      spriteset_template_box_car_brit_gen_2_1(10 + 0)
    }

    spritegroup box_car_brit_gen_2_1_sg_0 {
        loaded:  [
            box_car_brit_gen_2_1_ss_0,
        ];
        loading: [
            box_car_brit_gen_2_1_ss_0,
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_graphics_0, 0) {
        0: return box_car_brit_gen_2_1_sg_0;
        return box_car_brit_gen_2_1_sg_0;
    }


/*Empty sprites for slices that are invisible - same for all vehicles */

spriteset(box_car_brit_gen_2_1_ss_hidden, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_2_1_sg_hidden {
    loaded:  [
        box_car_brit_gen_2_1_ss_hidden,
    ];
    loading: [
        box_car_brit_gen_2_1_ss_hidden,
    ];
}


    random_switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_graphics_random_0) {
        
            1: return box_car_brit_gen_2_1_switch_graphics_0;
        
    }



switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_graphics_by_year, build_year) {
    
        0..5000000:box_car_brit_gen_2_1_switch_graphics_random_0;
    
    return box_car_brit_gen_2_1_switch_graphics_random_0;
}

// show default graphics, or special cases like depot? (purchase is handled separately using purchase cb)
switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_graphics, extra_callback_info1) {
    0x10: return box_car_brit_gen_2_1_sg_hidden;
    return box_car_brit_gen_2_1_switch_graphics_by_year;
}


// buy menu graphics
template spriteset_template_purchase_box_car_brit_gen_2_1() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [107,   10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [60,    10, 1, 1, 0, 0]
    [316,   10, 24, 15, -12, -6]
    [60,    10, 1, 1, 0, 0]
}


spriteset(box_car_brit_gen_2_1_ss_purchase, "generated/graphics/box_car_brit_gen_2_0.png") {
  spriteset_template_purchase_box_car_brit_gen_2_1()
}

spritegroup box_car_brit_gen_2_1_sg_purchase {
    loaded:  [
        box_car_brit_gen_2_1_ss_purchase,
    ];
    loading: [
        box_car_brit_gen_2_1_ss_purchase,
    ];
}





// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //

    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_0, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 24;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_1, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 35;
    }


    switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_2, cargo_classes) {
        bitmask(CC_PASSENGERS): return 0;
        bitmask(CC_MAIL): return 0;
        return 47;
    }


switch (FEAT_TRAINS, SELF, box_car_brit_gen_2_1_switch_cargo_capacity, param_adjust_vehicle_capacity) {
    0: box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_0;
    1: box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_1;
    2: box_car_brit_gen_2_1_switch_cargo_capacity_by_cargo_2;
}


// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, box_car_brit_gen_2_1, 1264) {
    property {
        name:                           string(STR_NAME_box_car_brit_gen_2, string(STR_NAME_SUFFIX_CAR));
        climates_available:             NO_CLIMATE;
        engine_class:                   ENGINE_CLASS_STEAM;
        visual_effect_and_powered:      visual_effect(VISUAL_EFFECT_DISABLE, 0);
        introduction_date:              date(1940,01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 24;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        
            speed:                          100mph;
        
        weight:                         18ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    22;
        running_cost_factor:            17;
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_PIECE_GOODS,CC_EXPRESS,CC_ARMOURED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [GRAI,WHEA,MAIZ];
        cargo_disallow_refit:           [];
        default_cargo_type:             GOOD;
        loading_speed:                  20;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         4;
        track_type:                     RAIL;
    }
    graphics {
        cargo_capacity:                 box_car_brit_gen_2_1_switch_cargo_capacity;
        purchase_cargo_capacity:        box_car_brit_gen_2_1_switch_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_BUY_MENU_OFFERS_AUTOREFIT), string(STR_EMPTY));
        default:                        box_car_brit_gen_2_1_switch_graphics;
        purchase:                       box_car_brit_gen_2_1_sg_purchase;
        
        
    }
}

// -- end 1264 -- 


/*Null trailing slice for units */

spriteset(box_car_brit_gen_2_2_ss, "generated/graphics/null_trailing_part.png") {
    [0, 0, 10, 10, 0, 0]   
}

spritegroup box_car_brit_gen_2_2_sg {
    loaded:  [
        box_car_brit_gen_2_2_ss,
    ];
    loading: [
        box_car_brit_gen_2_2_ss,
    ];
}

item(FEAT_TRAINS, box_car_brit_gen_2_2, 1265) {
    property {
        climates_available:             NO_CLIMATE;
        introduction_date:              date(01,01,01);
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          0hp;
        weight:                         0ton;
        cost_factor:                    0;
        running_cost_factor:            0;
        refit_cost:                     0;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask();
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        misc_flags:                     bitmask(); // nml constants
        length:                         1;
    }
    graphics {
        default:                        box_car_brit_gen_2_2_sg;
    }
}

<!--! this is the default template for vehicles that don't supply their own template -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:sprites_random_variations repeat="variation_num python:range(consist.get_num_spritesets())">
    spriteset(${vehicle.id}_ss_${variation_num}, "${global_constants.graphics_path}${consist.id}_${variation_num}.png") {
      spriteset_template_${vehicle.id}(10 + ${vehicle.spriterow_num * 30})
    }

    spritegroup ${vehicle.id}_sg_${variation_num} {
        loaded:  [
            ${vehicle.id}_ss_${variation_num},
        ];
        loading: [
            ${vehicle.id}_ss_${variation_num},
        ];
    }
    // always include a switch to get to spritegroups even if it does nothing - the random switches need to route to it
    switch (FEAT_ROADVEHS, SELF, ${vehicle.id}_switch_graphics_${variation_num}, 0) {
        0: return ${vehicle.id}_sg_${variation_num};
        return ${vehicle.id}_sg_${variation_num};
    }
</tal:sprites_random_variations>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}_0.png") {
  spriteset_template_purchase_${vehicle.id}()
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

${vehicle.render_cargo_capacity()}

${vehicle.render_properties()}

// -- some switches are common to all vehicles so included with properties -- //

// -- smoke -- //
switch (FEAT_ROADVEHS, SELF, ${vehicle.id}_create_visual_effect, ${vehicle.get_expression_for_effects()}) {
    return ${len(vehicle.effects)};
}


// -- props -- //
item(FEAT_ROADVEHS, ${vehicle.id}, ${vehicle.numeric_id}) {
    property {
        name:                           ${consist.get_name()};
        cargo_capacity:                 ${vehicle.capacities[0]};
        sprite_id:                      SPRITE_ID_NEW_ROADVEH; //enable new graphics - nml constant
        <tal:lead_slice_props condition="vehicle.is_lead_slice_of_consist">
            introduction_date:              date(${consist.intro_date},01,01); // consist just supplies intro year - openttd randomises intro dates a bit anyway
            power:                          ${consist.power}hp;
            speed:                          ${consist.speed}mph;
            weight:                         ${consist.weight}ton;
            tractive_effort_coefficient:    ${consist.tractive_effort_coefficient};
            cost_factor:                    ${consist.buy_cost};
            running_cost_base:              RUNNING_COST_ROADVEH;
            running_cost_factor:            ${consist.running_cost};
            model_life:                     ${consist.adjusted_model_life};
            vehicle_life:                   ${consist.vehicle_life};
            reliability_decay:              20; // default value
            retire_early:                   ${consist.vehicle_life - 4}; // magic from Eddi
            sound_effect:                   SOUND_TRUCK_START;
        </tal:lead_slice_props>
        refit_cost:                     0; // this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask(${vehicle.refittable_classes});
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [${vehicle.get_label_refits_allowed()}];
        cargo_disallow_refit:           [${vehicle.get_label_refits_disallowed()}];
        default_cargo_type:             ${vehicle.default_cargo};
        cargo_age_period:               ${vehicle.cargo_age_period};
        misc_flags:                     bitmask(${vehicle.special_flags}); // nml constants
        length:                         ${vehicle.vehicle_length};
        effect_spawn_model:             ${vehicle.effect_spawn_model};
    }
    graphics {
        cargo_capacity:                 ${vehicle.id}_switch_cargo_capacity;
        purchase_cargo_capacity:        ${vehicle.id}_switch_cargo_capacity;
        loading_speed:                  ${vehicle.id}_switch_loading_speed;
        default:                        ${vehicle.id}_switch_graphics;
        purchase:                       ${vehicle.id}_sg_purchase;
        create_effect:                  ${vehicle.id}_create_visual_effect;
        <!--! no buy menu extra text in this grf by design; extra text is associated with BAD FEATURES -->
        <tal:add_articulated_parts condition="vehicle.is_lead_slice_of_consist">
            articulated_part: ${consist.id}_articulated_cb_switch;
        </tal:add_articulated_parts>
    }
}

if (${consist.get_expression_for_roster()}) {
    item(FEAT_ROADVEHS, ${vehicle.id}, ${vehicle.numeric_id}) {
        property {
            climates_available:             ${vehicle.availability};
        }
    }
}

// -- end ${vehicle.numeric_id} -- <!--! another comment to aid reading the final nml  -->

